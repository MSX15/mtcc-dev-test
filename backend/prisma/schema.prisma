generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cargo {
  id                       Int                    @id @default(autoincrement())
  description              String?
  cargoDimensionCategoryId Int
  cargoDimensions          String?
  cargoWeight              Float?
  cargoDimensionCategory   CargoDimensionCategory @relation(fields: [cargoDimensionCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tripRequest              TripRequest[]
  tripTicket               TripTicket[]
}

model CargoDimensionCategory {
  id           Int     @id @default(autoincrement())
  name         String
  width        Int
  depth        Int
  height       Int
  unitsOfSpace Float
  Cargo        Cargo[]
}

model Location {
  id                       Int           @id @default(autoincrement())
  name                     String
  coordinateX              Decimal?      @db.Decimal
  coordinateY              Decimal?      @db.Decimal
  addressDetails           Json?         @db.Json
  isDeleted                Boolean       @default(false)
  trip_FromLocation        Trip[]        @relation("Trip_FromLocationIdToLocation")
  trip_ToLocation          Trip[]        @relation("Trip_ToLocationIdToLocation")
  tripRequest_FromLocation TripRequest[] @relation("TripRequest_FromLocationIdToLocation")
  tripRequest_ToLocation   TripRequest[] @relation("TripRequest_ToLocationIdToLocation")
}

model Person {
  id                    Int           @id @default(autoincrement())
  name                  String
  code                  String?
  tripCreatedBy         Trip[]        @relation("Trip_CreatedByIdToPerson")
  tripModifiedBy        Trip[]        @relation("Trip_ModifiedByIdToPerson")
  tripRequests          TripRequest[]
  tripTicketCreatedBy   TripTicket[]  @relation("TripTicket_CreatedByIdToPerson")
  tripTicketModifiedBy  TripTicket[]  @relation("TripTicket_ModifiedByIdToPerson")
  tripTickets           TripTicket[]  @relation("TripTicket_PersonIdToPerson")
  tripRequestCreatedBy  TripRequest[] @relation("TripRequest_FromCreatedByIdToOPerson")
  tripRequestModifiedBy TripRequest[] @relation("TripRequest_FromModifiedByIdToOPerson")
}

model Status {
  id                  Int           @id @default(autoincrement())
  belongsToEntityType String?
  name                String
  isActive            Boolean
  trip                Trip[]
  tripRequest         TripRequest[]
  tripTicket          TripTicket[]
}

model Trip {
  id                  Int          @id @default(autoincrement())
  fromLocationId      Int
  toLocationId        Int
  departure           DateTime     @db.Timestamp(6)
  arrival             DateTime     @db.Timestamp(6)
  peopleCapacity      Int          @default(0)
  cargoVolumeCapacity Int          @default(0)
  cargoWeightCapacity Int          @default(0)
  tripRequestId       Int?
  statusId            Int?
  peopleCount         Int          @default(0)
  cargoWeight         Float        @default(0)
  cargoVolume         Float        @default(0)
  createdById         Int?
  createdAt           DateTime?    @db.Timestamp(6)
  modifiedById        Int?
  modifiedAt          DateTime?    @db.Timestamp(6)
  createdBy           Person?      @relation("Trip_CreatedByIdToPerson", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fromLocation        Location     @relation("Trip_FromLocationIdToLocation", fields: [fromLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modifiedBy          Person?      @relation("Trip_ModifiedByIdToPerson", fields: [modifiedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status              Status?      @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  toLocation          Location     @relation("Trip_ToLocationIdToLocation", fields: [toLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tripRequest         TripRequest? @relation(fields: [tripRequestId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tripTickets         TripTicket[]

  @@index([tripRequestId], map: "fki_FK_Trip_TripRequestId_TripRequest_Id")
}

model TripRequest {
  id             Int       @id @default(autoincrement())
  fromLocationId Int
  toLocationId   Int
  departEarliest DateTime? @db.Timestamp(6)
  departLatest   DateTime? @db.Timestamp(6)
  arriveEarliest DateTime? @db.Timestamp(6)
  arriveLatest   DateTime? @db.Timestamp(6)
  createdById    Int?
  createdAt      DateTime? @db.Timestamp(6)
  modifiedById   Int?
  modifiedAt     DateTime? @db.Timestamp(6)
  statusId       Int?
  remarks        String?
  trip           Trip[]
  fromLocation   Location  @relation("TripRequest_FromLocationIdToLocation", fields: [fromLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status         Status?   @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  toLocation     Location  @relation("TripRequest_ToLocationIdToLocation", fields: [toLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cargoList      Cargo[]
  personList     Person[]
  createdBy      Person?   @relation("TripRequest_FromCreatedByIdToOPerson", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modifiedBy     Person?   @relation("TripRequest_FromModifiedByIdToOPerson", fields: [modifiedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model TripTicket {
  id              Int       @id @default(autoincrement())
  tripId          Int
  personId        Int?
  cargoId         Int?
  dependentTripId Int?
  tripRequestId   Int?
  statusId        Int?
  createdById     Int?
  createdAt       DateTime? @db.Timestamp(6)
  modifiedById    Int?
  modifiedAt      DateTime? @db.Timestamp(6)
  trip            Trip      @relation(fields: [tripId], references: [id])
  cargo           Cargo?    @relation(fields: [cargoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy       Person?   @relation("TripTicket_CreatedByIdToPerson", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modifiedBy      Person?   @relation("TripTicket_ModifiedByIdToPerson", fields: [modifiedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person          Person?   @relation("TripTicket_PersonIdToPerson", fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status          Status?   @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
